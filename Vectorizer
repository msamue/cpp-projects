/**
 * Header here
 * https://www.chegg.com/homework-help/questions-and-answers/main-function-c-write-main-performs-tasks--simplifying-assumption-user-inputs-valid-expres-q32468337
*/

#include <iostream>
#include <string>
#include <cmath>
using namespace std;

/**
 * Gives the dimension of the specified vector
 * @param v a vector in dimension-coordinates format
 * @return the dimension of this vector
*/
//int dim(const double v[]) {

/**
* Gives a string representation of this vector in the form
* <x1, x2, ..., xn>, where x1 is the second element of the array,
* x2, the second element of the array, etc and n is the dimension
* of the vector and the first element of the array.
* @param v a dimension-coordinates array representation of a
* vector.
* @return a string representation of the specified vector
*/
string vtos(const double v[]) {
    if (v != NULL) {
        string str = "<";
        for (int i = 1; i < v[0]; i++) {
            if (i == v[0] - 1) {
                str += to_string(v[i]) + ", ";
            } else {
                return "empty";
            }
        }
    }
}

/**
* Computes the length of this vector
* @param v a dimension-coordinates representation of a vector
* @return the length of the specified vector
*/
double length(const double v[]) {
    double m = 0; //maybe replace m with x or something
    for (int i = 1; i < v[0]; i++) {
        m += v[i] * v[i];
    }
    return sqrt(m);
}

/**
* Determines whether two vectors are equal; two vectors are
* equal if they have the same dimension and their
* corresponding coordinates are equal.
* @param v1 a vector
* @param v2 a vector
* @return true if the specified vectors are equal;
* otherwise, false
*/
bool equal (const double v1[], const double v2[]) {
    int size = dim(v1);
    bool s = true;
    if (dim(v1) == dim(v2)) {
        for (int i = 1; i < size; i++){
            if (v1[i] != v2[i]) {
                s = false;
                break;
            }
        }
    } else {
        s = false;
    }
    return s;
}

/**
* Computes the sum of the specified vectors
* @param v1 a vector
* @param v2 a vector
* @return the sum of the specified vectors if they have the same
* dimension or NULL, otherwise
*/
double* add(const double v1[], const double v2[])

/**
* Computes the difference of the specified vectors
* @param v1 a vector
* @param v2 a vector
* @return the v1-v2 if the vectors have the same
* dimension or NULL, otherwise
*/
double* sub(const double v1[], const double v2[])

/**
* Computes the dot product of two vectors
* @param v1 a vector
* @param v2 a vector
* @return the dot product of v1 and v2 if they have the same
* dimension; otherwise, NAN
*/
double dot(const double v1[], const double v2[])

/**
* Computes the product of a vector and a number (scalar)
* @param v a vector
* @param n a number
* @return a vector whose coordinates are those of v, each
* multiplied by n; that is, <nv1, nv2, nv3,...,nvn>
*/
double* mult(const double v[], double n)





int main() {
    int n;
    cout << "Enter the dimension of three vectors -> ";
    cin >> n;
    n = n + 1;
    
    double v1[n], v2[n], v3[n];
    double *v1 = new double[n];
    double *v2 = new double[n];
    double *v3 = new double[n];
    
    cout << "\n Enter the coordinates of v1 ->";
}

